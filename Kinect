class KinectThreshold
{
  // Size of kinect image
  int w = 640;
  int h = 480;
  int threshold = 550;
  //just calculate and draw every 12th pixel (equivalent of 420X360)
  int skip = 12;
  PVector g; 

  // don't repeat the math over and over
  float[] depthLookUp = new float[2048];

  KinectThreshold()
  {
    // initializes kinect
    kinect.start();

    // enable depth camera but don't display
    kinect.enableDepth(true);
    kinect.processDepthImage(false);

    // lookup table for all possible depth values(0 - 2047)
    for (int i = 0; i < depthLookUp.length; i++)
    {
      depthLookUp[i] = rawDepthToMeters(i);
    }
  }

  void display()
  {    
    // raw depth data as array of integers
    int[] depth = kinect.getRawDepth();

    // clear the array list
    points.clear();

    for(int x = 0; x < w; x += skip)
    {
      for(int y = 0; y < h; y += skip)
      {
        // Mirroring the image
        int offset = w-x-1+y*w;

        // Convert kinect data to world xyz coordinate
        int rawDepth = depth[offset];
        // transform the array of scanned data into vectors
        PVector v = depthToWorld(x, y, rawDepth);

        if(rawDepth < threshold)
        {                   
          pushMatrix();
          translate(v.x*factor, v.y*factor, factor-v.z*factor);
          // draw a point
          stroke(0);
          strokeWeight(4);
          //point(0, 0);
          popMatrix();
          points.add(v); // key line of the code where the vectors are added to an array list of vectors 
        }
      }
    }
  }

  void quit()
  {
    kinect.quit();
  }

  int getThreshold()
  {
    return threshold;
  }

  void setThreshold(int t)
  {
    threshold = t;
  }

  int getSkip()
  {
    return skip;
  }

  void setSkip(int s)
  {
    skip = s;
  }

  // Functions from http://graphics.stanford.edu/~mdfisher/Kinect.html
  float rawDepthToMeters(int depthValue)
  {
    if(depthValue < 2047)
    {
      return(float)(1.0/((double)(depthValue)*-0.0030711016 + 3.3309495161));
    }
    return 0.0f;
  }

  PVector depthToWorld(int x, int y, int depthValue)
  {
    final double fx_d = 1.0 / 5.9421434211923247e+02;
    final double fy_d = 1.0 / 5.9104053696870778e+02;
    final double cx_d = 3.3930780975300314e+02;
    final double cy_d = 2.4273913761751615e+02;

    PVector result = new PVector();
    double depth =  depthLookUp[depthValue];//rawDepthToMeters(depthValue);
    result.x = (float)((x - cx_d) * depth * fx_d);
    result.y = (float)((y - cy_d) * depth * fy_d);
    result.z = (float)(depth);
    return result;
  }
}
